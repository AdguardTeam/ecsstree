// You can run this script with `yarn ts-node-esm validate-regexp.ts`
// (you can run TypeScript scripts directly with ts-node module)

import { parse, walk, CssNode } from 'ecss-tree';
// https://www.npmjs.com/package/regexpp
import { RegExpValidator } from 'regexpp';

// Some inputs to test, feel free to add more
const inputs = [
    // Not RegExps
    ':contains(aaa)',
    ':contains(aaa bbb)',

    // Invalid flag
    ':contains(/^aaa$/igx)',

    // RegExps
    ':contains(/aaa/)',
    ':contains(/^aaa$/)',
    ':contains(/^aaa$/ig)',
];

// Create RegExpValidator instance
// See https://github.com/mysticatea/regexpp#validateregexpliteralsource-options
const validator = new RegExpValidator();

// Iterate over inputs
// eslint-disable-next-line no-restricted-syntax
for (const input of inputs) {
    // Parse raw CSS selector to AST
    const ast = parse(input, { context: 'selector' });

    // Check if the parsed AST is a Selector
    if (ast.type !== 'Selector') {
        throw new Error(
            `Expected "Selector", got "${ast.type}" instead in "${input}"`,
        );
    }

    // Walk the parsed Selector AST
    walk(ast, (node: CssNode) => {
        // If the current node is a ":contains()" pseudo-class
        // See https://github.com/csstree/csstree/blob/master/docs/ast.md#pseudoclassselector
        if (node.type === 'PseudoClassSelector' && node.name === 'contains') {
            // Get the argument of the pseudo-class
            if (!node.children || node.children.size !== 1) {
                throw new Error(
                    `Expected 1 child, got ${
                        node.children?.size || '0'
                    } instead in "${input}"`,
                );
            }

            // Get the first and only child of the pseudo-class, which is the argument's node
            const child = node.children.first;

            // Check if the argument is a Raw node, since :contains() will have a Raw node as its argument
            // See https://github.com/csstree/csstree/blob/master/docs/ast.md#raw
            if (!child || child.type !== 'Raw') {
                throw new Error(
                    `Expected "Raw", got "${child?.type || 'none'}" instead in "${input}"`,
                );
            }

            // Get the argument value as a string. For example, it the input is
            // ":contains(/^aaa$/ig)", then this value will be "/^aaa$/ig"
            // (without the quotes)
            const arg = child.value;

            // Try to validate the argument as a regexp
            try {
                // It will try to validate the argument as a regexp literal.
                // If the argument is not a regexp literal, then it will throw
                // an error.
                validator.validateLiteral(arg);

                // If the code reaches this point, then the argument is a regexp
                console.log(`Valid regexp: ${arg}`);
            } catch (error: unknown) {
                // If the code reaches this point, it means that an error was
                // thrown, so the argument is not a valid regexp
                if (error instanceof Error) {
                    // Also print the error message that was generated by
                    // the regexpp library
                    console.log(`Invalid regexp: ${arg} (${error.message})`);
                } else {
                    console.log(`Invalid regexp: ${arg}`);
                }
            }
        }
    });
}
