// You can run this script with `yarn ts-node-esm parsing-selectors.ts`
// (you can run TypeScript scripts directly with ts-node module)

import {
    parse, generate, toPlainObject, fromPlainObject,
} from '@adguard/ecss-tree';
import { inspect } from 'util';

// Some inputs to test, feel free to add more
const inputs = [
    // Valid selectors
    'div:-abp-has(> .some-class > a[href^="https://example.com"])',
    'body:style(padding-top: 0 !important;):matches-media((min-width: 500px) and (max-width: 1000px))',
    'section:upward(2):contains(aaa\'bbb):xpath(//*[contains(text(),"()(cc")])',

    // Missing closing bracket at the end
    'div:-abp-has(> .some-class > a[href^="https://example.com"]',
];

// Iterate over inputs
// eslint-disable-next-line no-restricted-syntax
for (const input of inputs) {
    try {
        // Parse raw input to AST. This will throw an error if the input is not valid.
        // Don't forget to set context to 'selector', because CSSTree will try to parse
        // 'stylesheet' by default.
        const ast = parse(input, { context: 'selector' });

        // Check if the parsed AST is a Selector
        if (ast.type !== 'Selector') {
            throw new Error(
                `Expected "Selector", got "${ast.type}" instead in "${input}"`,
            );
        }

        // By default, AST uses a doubly linked list. To convert it to plain object, you
        // can use toPlainObject() function.
        // If you want to convert AST back to doubly linked list version, you can use
        // fromPlainObject() function.
        const astPlain = toPlainObject(ast);
        const astAgain = fromPlainObject(astPlain);

        // Print AST to console
        console.log(inspect(astPlain, { colors: true, depth: null }));

        // You can also generate string from AST (don't use plain object here)
        console.log(generate(astAgain));
    } catch (error: unknown) {
        // If the code reaches this point, it means that an error was
        // thrown, so the selector is invalid.
        if (error instanceof Error) {
            // Also print the error message that was generated by
            // the CSSTree parser
            console.log(
                `Invalid selector: ${input} (Error message: ${error.message})`,
            );
        } else {
            console.log(`Invalid selector: ${input}`);
        }
    }
}
