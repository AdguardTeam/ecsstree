// You can run this script with `yarn ts-node-esm validate-xpath.ts`
// (you can run TypeScript scripts directly with ts-node module)

import { parse, walk, CssNode } from '@adguard/ecss-tree';
// https://www.npmjs.com/package/xpath
import xpath from 'xpath';

// Some inputs to test, feel free to add more
const inputs = [
    // Some examples from https://www.w3schools.com/xml/xpath_syntax.asp
    ':xpath(/bookstore/book[1])',
    ':xpath(/bookstore/book[last()])',
    ':xpath(//title[@lang=\'en\'])',

    // Invalid :xpath() pseudo-class
    ':xpath(aaa\'bbb)',
    ':xpath($#...)',
    ':xpath(...)',
];

// Iterate over inputs
// eslint-disable-next-line no-restricted-syntax
for (const input of inputs) {
    // Parse raw CSS selector to AST
    const ast = parse(input, { context: 'selector' });

    // Check if the parsed AST is a Selector
    if (ast.type !== 'Selector') {
        throw new Error(
            `Expected "Selector", got "${ast.type}" instead in "${input}"`,
        );
    }

    // Walk the parsed Selector AST
    walk(ast, (node: CssNode) => {
        // If the current node is a ":xpath()" pseudo-class
        // See https://github.com/csstree/csstree/blob/master/docs/ast.md#pseudoclassselector
        if (node.type === 'PseudoClassSelector' && node.name === 'xpath') {
            // Get the argument of the pseudo-class
            if (!node.children || node.children.size !== 1) {
                throw new Error(
                    `Expected 1 child, got ${
                        node.children?.size || '0'
                    } instead in "${input}"`,
                );
            }

            // Get the first and only child of the pseudo-class, which is the argument's node
            const child = node.children.first;

            // Check if the argument is a Raw node, since :xpath() will have a Raw node as its argument
            // See https://github.com/csstree/csstree/blob/master/docs/ast.md#raw
            if (!child || child.type !== 'Raw') {
                throw new Error(
                    `Expected "Raw", got "${child?.type || 'none'}" instead in "${input}"`,
                );
            }

            // Get the argument value as a string. For example, it the input is
            // ":xpath(/bookstore/book[1])", then the argument value will be
            // "/bookstore/book[1]" (without the quotes)
            const arg = child.value;

            // Try to validate the argument as an XPath expression
            try {
                // It will try to validate the argument as an XPath expression.
                // If the argument is not a valid XPath expression, then an
                // error will be thrown.
                // xpath type definitions aren't correct, because they don't have
                // the "parse" function, so we need to cast it to "any" to be able
                // to use it. See:
                // https://github.com/goto100/xpath/blob/master/docs/parsed%20expressions.md
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (xpath as any).parse(arg);

                // If the code reaches this point, then the argument is an XPath
                // expression
                console.log(`Valid XPath expression: ${arg}`);
            } catch (error: unknown) {
                // If the code reaches this point, it means that an error was
                // thrown, so the argument is not a valid XPath expression
                if (error instanceof Error) {
                    // Also print the error message that was generated by
                    // the xpath library
                    console.log(`Invalid XPath expression: ${arg} (${error.message})`);
                } else {
                    console.log(`Invalid XPath expression: ${arg}`);
                }
            }
        }
    });
}
